require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe WebcamsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Webcam. As you add validations to Webcam, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'Aloha Bar', description: 'Pretty Long Bla Bla Bla', short_name: 'Aloha', latitude: -1.2, longitude: 2.3, slug: 'aloha-black-point' }
  }
  
  let(:invalid_attributes) { { name: nil } }

  describe "GET #index" do
    it "returns a success response" do
      webcam = Webcam.create! valid_attributes
      get :index, params: {}, format: :json
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      webcam = Webcam.create! valid_attributes
      get :show, params: { id: webcam.to_param }, format: :json
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    let(:admin) { create(:admin) }
    let(:user) { create(:user) }

    context "as admin" do 
      context "with valid params" do
        before { request.headers.merge! admin.create_new_auth_token }

        it "creates a new Webcam" do
          expect {
            post :create, params: { webcam: valid_attributes }, format: :json
          }.to change(Webcam, :count).by(1)
        end

        it "renders a JSON response with the new webcam" do

          post :create, params: { webcam: valid_attributes }, format: :json
          expect(response).to have_http_status(:created)
          expect(response.content_type).to eq('application/json')
          expect(response.location).to eq(webcam_url(Webcam.last))
        end
      end

      context "with invalid params" do
        before { request.headers.merge! admin.create_new_auth_token }
        
        it "renders a JSON response with errors for the new webcam" do
          post :create, params: { webcam: invalid_attributes }, format: :json
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end
    end
    
    context "as a regular user" do
      it "creates a new Webcam" do
        post :create, params: { webcam: valid_attributes }
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe "PUT #update" do
    let(:admin) { create(:admin) }

    context "with valid params" do
      before { request.headers.merge! admin.create_new_auth_token }

      let(:new_attributes) {
        { name: 'Novo Point' }
      }

      it "updates the requested webcam" do
        webcam = Webcam.create! valid_attributes
        put :update, params: { id: webcam.to_param, webcam: new_attributes }, format: :json
        webcam.reload
        expect(webcam.name).to eq('Novo Point')
      end

      it "renders a JSON response with the webcam" do
        webcam = Webcam.create! valid_attributes

        put :update, params: { id: webcam.to_param, webcam: valid_attributes }, format: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with invalid params" do
      before { request.headers.merge! admin.create_new_auth_token }

      it "renders a JSON response with errors for the webcam" do
        webcam = Webcam.create! valid_attributes

        put :update, params: { id: webcam.to_param, webcam: invalid_attributes }, format: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "DELETE #destroy" do
    let(:admin) { create(:admin) }
    before { request.headers.merge! admin.create_new_auth_token }
    
    it "destroys the requested webcam" do
      webcam = Webcam.create! valid_attributes
      expect {
        delete :destroy, params: { id: webcam.to_param }, format: :json
      }.to change(Webcam, :count).by(-1)
    end
  end

end
